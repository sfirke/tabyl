[{"path":[]},{"path":"/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"CONTRIBUTING","text":"love collaboration.","code":""},{"path":"/CONTRIBUTING.html","id":"bugs-feature-requests","dir":"","previous_headings":"","what":"Bugs? Feature requests?","title":"CONTRIBUTING","text":"Submit issue issues page","code":""},{"path":"/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"prefer discussion unsolicited code contribution, .e., pull request. ensures effort wasted ’re aligned improve janitor package. especially true proposed contribution match currently open issue. ’s case, please open new issue(s) discussion , prior submitting code. proposed contribution addresses multiple issues, ideally broken multiple pull requests. make easier review approve.","code":""},{"path":"/CONTRIBUTING.html","id":"the-mechanics-of-contributing","dir":"","previous_headings":"Code contributions","what":"The mechanics of contributing:","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/janitor.git Make sure track progress upstream (.e., version janitor sfirke/janitor) git remote add upstream https://github.com/sfirke/janitor.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request main branch sfirke/janitor","code":""},{"path":"/CONTRIBUTING.html","id":"prefer-to-discuss-over-email","dir":"","previous_headings":"","what":"Prefer to discuss over email?","title":"CONTRIBUTING","text":"Email Sam. email address DESCRIPTION file repo.","code":""},{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 tabyl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/tabyls.html","id":"motivation-why-tabyl","dir":"Articles","previous_headings":"","what":"Motivation: why tabyl?","title":"tabyls: a tidy, fully-featured approach to counting things","text":"Analysts lot counting. Indeed, ’s said “data science mostly counting things.” base R function counting, table(), leaves much desired: doesn’t accept data.frame inputs (thus doesn’t play nicely %>% pipe) doesn’t output data.frames results hard format. Compare look formatting choices R table Microsoft Excel PivotTable even table formatting provided SPSS. tabyl() approach tabulating variables addresses shortcomings. ’s part janitor package counting fundamental part data cleaning exploration. tabyl() tidyverse-aligned primarily built upon dplyr tidyr packages.","code":""},{"path":"/articles/tabyls.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it works","title":"tabyls: a tidy, fully-featured approach to counting things","text":"surface, tabyl() produces frequency tables using 1, 2, 3 variables. hood, tabyl() also attaches copy counts attribute resulting data.frame. result looks like basic data.frame counts, ’s also tabyl containing metadata, can use adorn_ functions add additional information pretty formatting. adorn_ functions built work tabyls, adapted work similar, non-tabyl data.frames need formatting.","code":""},{"path":"/articles/tabyls.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"tabyls: a tidy, fully-featured approach to counting things","text":"vignette demonstrates tabyl context studying humans starwars dataset dplyr:","code":"library(dplyr) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found humans <- starwars %>%   filter(species == \"Human\")"},{"path":"/articles/tabyls.html","id":"one-way-tabyl","dir":"Articles","previous_headings":"Examples","what":"One-way tabyl","title":"tabyls: a tidy, fully-featured approach to counting things","text":"Tabulating single variable simplest kind tabyl: NA values present, tabyl() also displays “valid” percentages, .e., missing values removed denominator. tabyl() built take data.frame column names, can also produce one-way tabyl calling directly vector: adorn_ helper functions built 2-way tabyls, make sense 1-way tabyl work:","code":"library(janitor)  t1 <- humans %>%   tabyl(eye_color)  t1 #>  eye_color  n    percent #>       blue 12 0.34285714 #>  blue-gray  1 0.02857143 #>      brown 16 0.45714286 #>       dark  1 0.02857143 #>      hazel  2 0.05714286 #>    unknown  1 0.02857143 #>     yellow  2 0.05714286 x <- c(\"big\", \"big\", \"small\", \"small\", \"small\", NA) tabyl(x) #>      x n   percent valid_percent #>    big 2 0.3333333           0.4 #>  small 3 0.5000000           0.6 #>   <NA> 1 0.1666667            NA t1 %>%   adorn_totals(\"row\") %>%   adorn_pct_formatting() #>  eye_color  n percent #>       blue 12   34.3% #>  blue-gray  1    2.9% #>      brown 16   45.7% #>       dark  1    2.9% #>      hazel  2    5.7% #>    unknown  1    2.9% #>     yellow  2    5.7% #>      Total 35  100.0%"},{"path":"/articles/tabyls.html","id":"two-way-tabyl","dir":"Articles","previous_headings":"Examples","what":"Two-way tabyl","title":"tabyls: a tidy, fully-featured approach to counting things","text":"often called “crosstab” “contingency” table. Calling tabyl two columns data.frame produces result common combination dplyr::count(), followed tidyr::pivot_wider() wide form: Since ’s tabyl, can enhance adorn_ helper functions. instance: Adornments options control axes, rounding, relevant formatting choices ().","code":"t2 <- humans %>%   tabyl(gender, eye_color)  t2 #>     gender blue blue-gray brown dark hazel unknown yellow #>   feminine    3         0     4    0     1       1      0 #>  masculine    9         1    12    1     1       0      2 t2 %>%   adorn_percentages(\"row\") %>%   adorn_pct_formatting(digits = 2) %>%   adorn_ns() #>     gender       blue blue-gray       brown      dark      hazel    unknown #>   feminine 33.33% (3) 0.00% (0) 44.44%  (4) 0.00% (0) 11.11% (1) 11.11% (1) #>  masculine 34.62% (9) 3.85% (1) 46.15% (12) 3.85% (1)  3.85% (1)  0.00% (0) #>     yellow #>  0.00% (0) #>  7.69% (2)"},{"path":"/articles/tabyls.html","id":"three-way-tabyl","dir":"Articles","previous_headings":"Examples","what":"Three-way tabyl","title":"tabyls: a tidy, fully-featured approach to counting things","text":"Just table() accepts three variables, tabyl(), producing list tabyls: adorn_ helper functions called list data.frames - like output three-way tabyl call - call purrr::map() apply data.frame list: automatic mapping supports interactive data analysis switches combinations 2 3 variables. way, user starts humans %>% tabyl(eye_color, skin_color), adds adorn_ calls, decides split tabulation gender modifies first line humans %>% tabyl(eye_color, skin_color, gender), don’t rewrite subsequent adornment calls use map(). However, feels natural call map() lapply(), still supported. instance, t3 %>% lapply(adorn_percentages) produce result t3 %>% adorn_percentages.","code":"t3 <- humans %>%   tabyl(eye_color, skin_color, gender)  # the result is a tabyl of eye color x skin color, split into a list by gender t3 #> $feminine #>  eye_color dark fair light none pale tan white #>       blue    0    2     1    0    0   0     0 #>  blue-gray    0    0     0    0    0   0     0 #>      brown    0    1     3    0    0   0     0 #>       dark    0    0     0    0    0   0     0 #>      hazel    0    0     1    0    0   0     0 #>    unknown    0    0     0    1    0   0     0 #>     yellow    0    0     0    0    0   0     0 #>  #> $masculine #>  eye_color dark fair light none pale tan white #>       blue    0    7     2    0    0   0     0 #>  blue-gray    0    1     0    0    0   0     0 #>      brown    3    4     3    0    0   2     0 #>       dark    1    0     0    0    0   0     0 #>      hazel    0    1     0    0    0   0     0 #>    unknown    0    0     0    0    0   0     0 #>     yellow    0    0     0    0    1   0     1 library(purrr) humans %>%   tabyl(eye_color, skin_color, gender, show_missing_levels = FALSE) %>%   adorn_totals(\"row\") %>%   adorn_percentages(\"all\") %>%   adorn_pct_formatting(digits = 1) %>%   adorn_ns() %>%   adorn_title() #> $feminine #>            skin_color                     #>  eye_color       fair     light      none #>       blue  22.2% (2) 11.1% (1)  0.0% (0) #>      brown  11.1% (1) 33.3% (3)  0.0% (0) #>      hazel   0.0% (0) 11.1% (1)  0.0% (0) #>    unknown   0.0% (0)  0.0% (0) 11.1% (1) #>      Total  33.3% (3) 55.6% (5) 11.1% (1) #>  #> $masculine #>            skin_color                                                 #>  eye_color       dark       fair     light     pale      tan    white #>       blue   0.0% (0) 26.9%  (7)  7.7% (2) 0.0% (0) 0.0% (0) 0.0% (0) #>  blue-gray   0.0% (0)  3.8%  (1)  0.0% (0) 0.0% (0) 0.0% (0) 0.0% (0) #>      brown  11.5% (3) 15.4%  (4) 11.5% (3) 0.0% (0) 7.7% (2) 0.0% (0) #>       dark   3.8% (1)  0.0%  (0)  0.0% (0) 0.0% (0) 0.0% (0) 0.0% (0) #>      hazel   0.0% (0)  3.8%  (1)  0.0% (0) 0.0% (0) 0.0% (0) 0.0% (0) #>     yellow   0.0% (0)  0.0%  (0)  0.0% (0) 3.8% (1) 0.0% (0) 3.8% (1) #>      Total  15.4% (4) 50.0% (13) 19.2% (5) 3.8% (1) 7.7% (2) 3.8% (1)"},{"path":"/articles/tabyls.html","id":"other-features-of-tabyls","dir":"Articles","previous_headings":"Examples > Three-way tabyl","what":"Other features of tabyls","title":"tabyls: a tidy, fully-featured approach to counting things","text":"can suppressed desired NA values can displayed suppressed tabyls print without displaying row numbers can call chisq.test() fisher.test() two-way tabyl perform statistical tests, just like base R table() object.","code":""},{"path":"/articles/tabyls.html","id":"the-adorn_-functions","dir":"Articles","previous_headings":"Examples","what":"The adorn_* functions","title":"tabyls: a tidy, fully-featured approach to counting things","text":"modular functions build tabyl approximate functionality PivotTable Microsoft Excel. print elegant results interactive analysis sharing report, e.g., knitr::kable(). example:","code":"humans %>%   tabyl(gender, eye_color) %>%   adorn_totals(c(\"row\", \"col\")) %>%   adorn_percentages(\"row\") %>%   adorn_pct_formatting(rounding = \"half up\", digits = 0) %>%   adorn_ns() %>%   adorn_title(\"combined\") %>%   knitr::kable()"},{"path":"/articles/tabyls.html","id":"the-adorn-functions-are","dir":"Articles","previous_headings":"Examples > The adorn_* functions","what":"The adorn functions are:","title":"tabyls: a tidy, fully-featured approach to counting things","text":"adorn_totals(): Add totals row, column, . adorn_percentages(): Calculate percentages along either axis entire tabyl adorn_pct_formatting(): Format percentage columns, controlling number digits display whether append % symbol contrasts rounding 10.5 10 base R’s round(10.5). adorn_rounding() returns columns class numeric, allowing graphing, sorting, etc. ’s less-aggressive substitute adorn_pct_formatting(); two functions called together. adorn_ns(): add Ns tabyl. can drawn tabyl’s underlying counts, attached tabyl metadata, can supplied user. adorn_title(): add title tabyl (data.frame). Options include putting column title new row top data.frame combining row column titles data.frame’s first name slot. adornments called logical order, e.g., probably want add totals percentages calculated. general, call order appear .","code":""},{"path":"/articles/tabyls.html","id":"byot-bring-your-own-tabyl","dir":"Articles","previous_headings":"Examples","what":"BYOt (Bring Your Own tabyl)","title":"tabyls: a tidy, fully-featured approach to counting things","text":"can also call adorn_ functions data.frames, results calls tabyl(). E.g., mtcars %>% adorn_totals(\"col\") %>% adorn_percentages(\"col\") performs expected, despite mtcars tabyl. can handy data.frame simple tabulation generated tabyl still benefit adorn_ formatting functions. simple example: calculate proportion records meeting certain condition, format results. can control columns adorned using ... argument. accepts tidyselect helpers. , can specify columns way using dplyr::select(). instance, say numeric column included percentage formatting wish exempt . , proportion column adorned: specify two consecutive numeric columns totaled (year numeric included): ’s complex example uses data.frame means, counts. create table containing mean 3rd variable grouped two variables, use adorn_ functions round values append Ns. first part pretty straightforward: Now adorn_ . Since result tabyl() call, doesn’t underlying Ns stored core attribute, ’ll supply : needed, Ns can manipulated data.frame appended. tabyl values thousands Ns formatted include separating character , typically seen American numbers, e.g., 3,000. First create tabyl adorn: point, Ns unformatted: Now format insert thousands commas. tabyl’s raw Ns stored \"core\" attribute. retrieve attr(), apply base R function format() numeric columns. Lastly, append Ns using adorn_ns().","code":"percent_above_165_cm <- humans %>%   group_by(gender) %>%   summarise(pct_above_165_cm = mean(height > 165, na.rm = TRUE), .groups = \"drop\")  percent_above_165_cm %>%   adorn_pct_formatting() #> # A tibble: 2 × 2 #>   gender    pct_above_165_cm #>   <chr>     <chr>            #> 1 feminine  28.6%            #> 2 masculine 100.0% mtcars %>%   count(cyl, gear) %>%   rename(proportion = n) %>%   adorn_percentages(\"col\", na.rm = TRUE, proportion) %>%   adorn_pct_formatting(, , , proportion) # the commas say to use the default values of the other arguments #>  cyl gear proportion #>    4    3       3.1% #>    4    4      25.0% #>    4    5       6.2% #>    6    3       6.2% #>    6    4      12.5% #>    6    5       3.1% #>    8    3      37.5% #>    8    5       6.2% cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_totals(c(\"col\", \"row\"), fill = \"-\", na.rm = TRUE, name = \"Total Cases\", recovered:died) #>       region year recovered died Total Cases #>         East 2015       125   13         138 #>         West 2015        87   12          99 #>  Total Cases    -       212   25         237 library(tidyr) # for pivot_wider() mpg_by_cyl_and_am <- mtcars %>%   group_by(cyl, am) %>%   summarise(mpg = mean(mpg), .groups = \"drop\") %>%   pivot_wider(names_from = am, values_from = mpg)  mpg_by_cyl_and_am #> # A tibble: 3 × 3 #>     cyl   `0`   `1` #>   <dbl> <dbl> <dbl> #> 1     4  22.9  28.1 #> 2     6  19.1  20.6 #> 3     8  15.0  15.4 mpg_by_cyl_and_am %>%   adorn_rounding() %>%   adorn_ns(     ns = mtcars %>% # calculate the Ns on the fly by calling tabyl on the original data       tabyl(cyl, am)   ) %>%   adorn_title(\"combined\", row_name = \"Cylinders\", col_name = \"Is Automatic\") #>   Cylinders/Is Automatic         0        1 #> 1                      4 22.9  (3) 28.1 (8) #> 2                      6 19.1  (4) 20.6 (3) #> 3                      8 15.1 (12) 15.4 (2) set.seed(1) raw_data <- data.frame(   sex = rep(c(\"m\", \"f\"), 3000),   age = round(runif(3000, 1, 102), 0) ) raw_data$agegroup <- cut(raw_data$age, quantile(raw_data$age, c(0, 1 / 3, 2 / 3, 1)))  comparison <- raw_data %>%   tabyl(agegroup, sex, show_missing_levels = FALSE) %>%   adorn_totals(c(\"row\", \"col\")) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting(digits = 1)  comparison #>  agegroup      f      m  Total #>    (1,34]  33.9%  32.3%  33.1% #>   (34,68]  33.0%  33.7%  33.4% #>  (68,102]  32.7%  33.3%  33.0% #>      <NA>   0.4%   0.6%   0.5% #>     Total 100.0% 100.0% 100.0% comparison %>%   adorn_ns() #>  agegroup              f              m          Total #>    (1,34]  33.9% (1,018)  32.3%   (970)  33.1% (1,988) #>   (34,68]  33.0%   (990)  33.7% (1,012)  33.4% (2,002) #>  (68,102]  32.7%   (980)  33.3% (1,000)  33.0% (1,980) #>      <NA>   0.4%    (12)   0.6%    (18)   0.5%    (30) #>     Total 100.0% (3,000) 100.0% (3,000) 100.0% (6,000) formatted_ns <- attr(comparison, \"core\") %>% # extract the tabyl's underlying Ns   adorn_totals(c(\"row\", \"col\")) %>% # to match the data.frame we're appending to   dplyr::mutate(across(where(is.numeric), ~ format(.x, big.mark = \",\")))  comparison %>%   adorn_ns(position = \"rear\", ns = formatted_ns) #>  agegroup              f              m          Total #>    (1,34]  33.9% (1,018)  32.3% (  970)  33.1% (1,988) #>   (34,68]  33.0% (  990)  33.7% (1,012)  33.4% (2,002) #>  (68,102]  32.7% (  980)  33.3% (1,000)  33.0% (1,980) #>      <NA>   0.4% (   12)   0.6% (   18)   0.5% (   30) #>     Total 100.0% (3,000) 100.0% (3,000) 100.0% (6,000)"},{"path":"/articles/tabyls.html","id":"questions-comments","dir":"Articles","previous_headings":"Examples > BYOt (Bring Your Own tabyl)","what":"Questions? Comments?","title":"tabyls: a tidy, fully-featured approach to counting things","text":"File issue GitHub suggestions related tabyl() adorn_ helpers encounter problems using .","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Firke. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Firke S (2024). tabyl: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {tabyl: What the Package Does (One Line, Title Case)},   author = {Sam Firke},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"tabyl","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"tidyverse-friendly functions counting things R. Formerly part janitor package.","code":""},{"path":"/reference/adorn_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"function adds back underlying Ns tabyl whose percentages calculated using adorn_percentages(), display Ns percentages together. can also call non-tabyl data.frame wish append Ns.","code":""},{"path":"/reference/adorn_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"","code":"adorn_ns(   dat,   position = \"rear\",   ns = attr(dat, \"core\"),   format_func = function(x) {      format(x, big.mark = \",\")  },   ... )"},{"path":"/reference/adorn_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"dat data.frame class tabyl adorn_percentages /adorn_pct_formatting called .  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). position N go front, rear, percentage? ns Ns append.  default \"core\" attribute input tabyl dat, original Ns two-way tabyl stored. However, Ns stored somewhere else, need customize beyond can done format_func, can supply . format_func formatting function run Ns. Consider defining base::format(). ... Columns adorn. takes tidyselect specification.  default, columns adorned except first column columns class numeric, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"/reference/adorn_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"data.frame Ns appended","code":""},{"path":"/reference/adorn_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting() %>%   adorn_ns(position = \"front\") #>  am         4         6          8 #>   0 3 (27.3%) 4 (57.1%) 12 (85.7%) #>   1 8 (72.7%) 3 (42.9%)  2 (14.3%)  # Format the Ns with a custom format_func: set.seed(1) bigger_dat <- data.frame(   sex = rep(c(\"m\", \"f\"), 3000),   age = round(runif(3000, 1, 102), 0) ) bigger_dat$age_group <- cut(bigger_dat$age, quantile(bigger_dat$age, c(0, 1 / 3, 2 / 3, 1)))  bigger_dat %>%   tabyl(age_group, sex, show_missing_levels = FALSE) %>%   adorn_totals(c(\"row\", \"col\")) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting(digits = 1) %>%   adorn_ns(format_func = function(x) format(x, big.mark = \".\", decimal.mark = \",\")) #>  age_group              f              m          Total #>     (1,34]  33.9% (1.018)  32.3%   (970)  33.1% (1.988) #>    (34,68]  33.0%   (990)  33.7% (1.012)  33.4% (2.002) #>   (68,102]  32.7%   (980)  33.3% (1.000)  33.0% (1.980) #>       <NA>   0.4%    (12)   0.6%    (18)   0.5%    (30) #>      Total 100.0% (3.000) 100.0% (3.000) 100.0% (6.000) # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments:  cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%  adorn_percentages(\"col\",,recovered:died) %>%  adorn_pct_formatting(,,,,,recovered:died) %>%  adorn_ns(,,,recovered:died) #>  region year   recovered       died #>    East 2015 59.0% (125) 52.0% (13) #>    West 2015 41.0%  (87) 48.0% (12)"},{"path":"/reference/adorn_pct_formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"Numeric columns get multiplied 100 formatted percentages according user specifications. function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns adorn ... argument.  Non-numeric columns always excluded. decimal separator character result getOption(\"OutDec\"), based user's locale. default behavior undesirable, change value ahead calling function, either changing locale options(OutDec = \",\").  aligns decimal separator character used base::print().","code":""},{"path":"/reference/adorn_pct_formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"","code":"adorn_pct_formatting(   dat,   digits = 1,   rounding = \"half to even\",   affix_sign = TRUE,   ... )"},{"path":"/reference/adorn_pct_formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"dat data.frame decimal values, typically result call adorn_percentages tabyl. given list data.frames, function apply data.frame list (designed 3-way tabyl lists). digits many digits displayed decimal point? rounding method use rounding - either \"half even\", base R default method, \"half \", 14.5 rounds 15. affix_sign % sign affixed end? ... columns adorn. takes tidyselect specification.  default, numeric columns (besides initial column, numeric) adorned, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"/reference/adorn_pct_formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"data.frame formatted percentages","code":""},{"path":"/reference/adorn_pct_formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting() #>  am     4     6     8 #>   0 27.3% 57.1% 85.7% #>   1 72.7% 42.9% 14.3%  # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments:  cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_percentages(\"col\", , recovered:died) %>%   adorn_pct_formatting(, , , recovered:died) #>  region year recovered  died #>    East 2015     59.0% 52.0% #>    West 2015     41.0% 48.0%"},{"path":"/reference/adorn_percentages.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame of counts to percentages. — adorn_percentages","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns adorn ... argument.","code":""},{"path":"/reference/adorn_percentages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"","code":"adorn_percentages(dat, denominator = \"row\", na.rm = TRUE, ...)"},{"path":"/reference/adorn_percentages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"dat tabyl data.frame tabyl-like layout. given list data.frames, function apply data.frame list (designed 3-way tabyl lists). denominator direction use calculating percentages. One \"row\", \"col\", \"\". na.rm missing values (including NaN) omitted calculations? ... columns adorn. takes <tidy-select> specification. default, numeric columns (besides initial column, numeric) adorned, allows manually specify columns adorned, use data.frame result call tabyl().","code":""},{"path":"/reference/adorn_percentages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"data.frame percentages, expressed numeric values 0 1.","code":""},{"path":"/reference/adorn_percentages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"col\") #>  am         4         6         8 #>   0 0.2727273 0.5714286 0.8571429 #>   1 0.7272727 0.4285714 0.1428571  # calculates correctly even with totals column and/or row: mtcars %>%   tabyl(am, cyl) %>%   adorn_totals(\"row\") %>%   adorn_percentages() #>     am         4         6         8 #>      0 0.1578947 0.2105263 0.6315789 #>      1 0.6153846 0.2307692 0.1538462 #>  Total 0.3437500 0.2187500 0.4375000  # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments:  cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_percentages(, , recovered:died) #>  region year recovered      died #>    East 2015 0.9057971 0.0942029 #>    West 2015 0.8787879 0.1212121"},{"path":"/reference/adorn_rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Round the numeric columns in a data.frame. — adorn_rounding","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"Can run data.frame least one numeric column. function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns round ... argument. formatting percentages, e.g., result adorn_percentages(), use adorn_pct_formatting() instead.  flexible variant ad-hoc usage. Compared adorn_pct_formatting(), multiply 100 pad numbers spaces alignment results data.frame. function retains class numeric input columns.","code":""},{"path":"/reference/adorn_rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"","code":"adorn_rounding(dat, digits = 1, rounding = \"half to even\", ...)"},{"path":"/reference/adorn_rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"dat tabyl data.frame similar layout. given list data.frames, function apply data.frame list (designed 3-way tabyl lists). digits many digits displayed decimal point? rounding Method use rounding - either \"half even\" (base R default method), \"half \", 14.5 rounds 15. ... Columns adorn.  takes tidyselect specification. default, numeric columns (besides initial column, numeric) adorned, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"/reference/adorn_rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"data.frame rounded numeric columns.","code":""},{"path":"/reference/adorn_rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages() %>%   adorn_rounding(digits = 2, rounding = \"half up\") #> Registered S3 method overwritten by 'janitor': #>   method      from  #>   print.tabyl tabyl #>  am    4    6    8 #>   0 0.16 0.21 0.63 #>   1 0.62 0.23 0.15  # tolerates non-numeric columns: library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"all\") %>%   mutate(dummy = \"a\") %>%   adorn_rounding() #>  am   4   6   8 dummy #>   0 0.1 0.1 0.4     a #>   1 0.2 0.1 0.1     a  # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments: cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_percentages(, , ends_with(\"ed\")) %>%   adorn_rounding(, , all_of(c(\"recovered\", \"died\"))) #>  region year recovered died #>    East 2015       0.9  0.1 #>    West 2015       0.9  0.1"},{"path":"/reference/adorn_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Add column name to the top of a two-way tabyl. — adorn_title","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"function adds column variable name top tabyl complete display information.  makes tabyl prettier, renders data.frame less useful manipulation.","code":""},{"path":"/reference/adorn_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"","code":"adorn_title(dat, placement = \"top\", row_name, col_name)"},{"path":"/reference/adorn_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"dat data.frame class tabyl data.frame tabyl-like layout. given list data.frames, function apply data.frame list (designed 3-way tabyl lists). placement title placement, one \"top\", \"combined\". See Details information. row_name (optional) default behavior pull row name attributes input tabyl object.  wish override text, input tabyl, supply string . col_name (optional) default behavior pull column_name attributes input tabyl object.  wish override text, input tabyl, supply string .","code":""},{"path":"/reference/adorn_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"input tabyl, augmented column title.  Non-tabyl inputs class tbl_df downgraded basic data.frames title row prints correctly.","code":""},{"path":"/reference/adorn_title.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"placement argument indicates whether column name added top tabyl otherwise-empty row \"top\" appended already-present row name variable (\"combined\"). formatting \"top\" option look base R's table(); also wipes column names, making hard use data.frame besides formatting reporting. \"combined\" option conservative regard.","code":""},{"path":"/reference/adorn_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_title(placement = \"top\") #>     cyl      #>  am   4 6  8 #>   0   3 4 12 #>   1   8 3  2  # Adding a title to a non-tabyl library(tidyr) library(dplyr) mtcars %>%   group_by(gear, am) %>%   summarise(avg_mpg = mean(mpg), .groups = \"drop\") %>%   pivot_wider(names_from = am, values_from = avg_mpg) %>%   adorn_rounding() %>%   adorn_title(\"top\", row_name = \"Gears\", col_name = \"Cylinders\") #>         Cylinders      #> 1 Gears         0    1 #> 2     3      16.1 <NA> #> 3     4        21 26.3 #> 4     5      <NA> 21.4"},{"path":"/reference/adorn_totals.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a totals row and/or column to a data.frame — adorn_totals","title":"Append a totals row and/or column to a data.frame — adorn_totals","text":"function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns totaled ... argument. Non-numeric columns converted character class user-specified fill character inserted totals row.","code":""},{"path":"/reference/adorn_totals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a totals row and/or column to a data.frame — adorn_totals","text":"","code":"adorn_totals(dat, where = \"row\", fill = \"-\", na.rm = TRUE, name = \"Total\", ...)"},{"path":"/reference/adorn_totals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a totals row and/or column to a data.frame — adorn_totals","text":"dat input data.frame least one numeric column. given list data.frames, function apply data.frame list (designed 3-way tabyl lists). One \"row\", \"col\", c(\"row\", \"col\") fill non-numeric columns, fill bottom row columns? string, relevant columns coerced character. NA column types preserved. na.rm missing values (including NaN) omitted calculations? name Name totals row /column.  created, name single string, name applied . created name vector length 2, first element vector used row name (column 1), second element used totals column name. Defaults \"Total\". ... Columns total.  takes tidyselect specification. default, numeric columns (besides initial column, numeric) included totals, allows manually specify columns included, use data.frame result call tabyl.","code":""},{"path":"/reference/adorn_totals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a totals row and/or column to a data.frame — adorn_totals","text":"data.frame augmented totals row, column, . data.frame now also class tabyl stores information attached totals underlying data tabyl attributes.","code":""},{"path":"/reference/adorn_totals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a totals row and/or column to a data.frame — adorn_totals","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_totals() #>     am  4 6  8 #>      0  3 4 12 #>      1  8 3  2 #>  Total 11 7 14"},{"path":"/reference/as_tabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tabyl attributes to a data.frame — as_tabyl","title":"Add tabyl attributes to a data.frame — as_tabyl","text":"tabyl data.frame containing counts variable co-occurrences two variables (.k.., contingency table crosstab). specialized kind data.frame attributes enable adorn_ functions called precise formatting presentation results. E.g., display results mix percentages, Ns, add totals rows columns, rounding options, style Microsoft Excel PivotTable. tabyl can result call janitor::tabyl(), case attributes added automatically.  function adds tabyl class attributes data.frame result call tabyl meets requirements two-way tabyl: 1) First column contains values variable 1 2) Column names 2:n values variable 2 3) Numeric values columns 2:n counts co-occurrences two variables.* = ideal form tabyl, janitor's adorn_ functions tolerate ignore non-numeric columns positions 2:n. instance, result dplyr::count() followed tidyr::pivot_wider() can treated tabyl. result calling tabyl() single variable special class one-way tabyl; function pertains two-way tabyl.","code":""},{"path":"/reference/as_tabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tabyl attributes to a data.frame — as_tabyl","text":"","code":"as_tabyl(dat, axes = 2, row_var_name = NULL, col_var_name = NULL)"},{"path":"/reference/as_tabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tabyl attributes to a data.frame — as_tabyl","text":"dat data.frame variable values first column numeric values columns. axes two_way tabyl one_way tabyl?  function called user, probably \"2\".  One-way tabyls created tabyl special case. row_var_name (optional) name variable row dimension; used adorn_title(). col_var_name (optional) name variable column dimension; used adorn_title().","code":""},{"path":"/reference/as_tabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add tabyl attributes to a data.frame — as_tabyl","text":"Returns data.frame, additional class \"tabyl\" attribute \"core\".","code":""},{"path":"/reference/as_tabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add tabyl attributes to a data.frame — as_tabyl","text":"","code":"as_tabyl(mtcars) #>   mpg cyl  disp  hp drat    wt  qsec vs am gear carb #>  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #>  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #>  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #>  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #>  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #>  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #>  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #>  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #>  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #>  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #>  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #>  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #>  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #>  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #>  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #>  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #>  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #>  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #>  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #>  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #>  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #>  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #>  15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #>  13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #>  19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #>  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #>  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #>  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #>  15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #>  19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #>  15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #>  21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"/reference/chisq.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply stats::chisq.test() to a two-way tabyl — chisq.test","title":"Apply stats::chisq.test() to a two-way tabyl — chisq.test","text":"generic function overrides stats::chisq.test. passed table two-way tabyl, runs janitor::chisq.test.tabyl, otherwise just calls stats::chisq.test().","code":""},{"path":"/reference/chisq.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply stats::chisq.test() to a two-way tabyl — chisq.test","text":"","code":"chisq.test(x, ...)  # Default S3 method chisq.test(x, y = NULL, ...)  # S3 method for class 'tabyl' chisq.test(x, tabyl_results = TRUE, ...)"},{"path":"/reference/chisq.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply stats::chisq.test() to a two-way tabyl — chisq.test","text":"x two-way tabyl, numeric vector factor ... parameters passed stats::chisq.test() y x vector, must another vector factor length tabyl_results TRUE x tabyl object, also return observed, expected, residuals stdres tabyl.","code":""},{"path":"/reference/chisq.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply stats::chisq.test() to a two-way tabyl — chisq.test","text":"result one stats::chisq.test(). tabyl_results TRUE, returned tables observed, expected, residuals stdres converted tabyls.","code":""},{"path":"/reference/chisq.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply stats::chisq.test() to a two-way tabyl — chisq.test","text":"","code":"tab <- tabyl(mtcars, gear, cyl) chisq.test(tab) #> Warning: Chi-squared approximation may be incorrect #>  #> \tPearson's Chi-squared test #>  #> data:  tab #> X-squared = 18.036, df = 4, p-value = 0.001214 #>  chisq.test(tab)$residuals #> Warning: Chi-squared approximation may be incorrect #>  gear          4           6          8 #>     3 -1.8303523 -0.70731720  2.1225827 #>     4  1.9079181  0.84866842 -2.2912878 #>     5  0.2145291 -0.08964215 -0.1267731"},{"path":"/reference/fisher.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply stats::fisher.test() to a two-way tabyl — fisher.test","title":"Apply stats::fisher.test() to a two-way tabyl — fisher.test","text":"generic function overrides stats::fisher.test(). passed table two-way tabyl, runs janitor::fisher.test.tabyl, otherwise just calls stats::fisher.test().","code":""},{"path":"/reference/fisher.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply stats::fisher.test() to a two-way tabyl — fisher.test","text":"","code":"fisher.test(x, ...)  # Default S3 method fisher.test(x, y = NULL, ...)  # S3 method for class 'tabyl' fisher.test(x, ...)"},{"path":"/reference/fisher.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply stats::fisher.test() to a two-way tabyl — fisher.test","text":"x two-way tabyl, numeric vector factor ... Parameters passed stats::fisher.test() y x vector, must another vector factor length","code":""},{"path":"/reference/fisher.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply stats::fisher.test() to a two-way tabyl — fisher.test","text":"one stats::fisher.test().","code":""},{"path":"/reference/fisher.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply stats::fisher.test() to a two-way tabyl — fisher.test","text":"","code":"tab <- tabyl(mtcars, gear, cyl) fisher.test(tab) #>  #> \tFisher's Exact Test for Count Data #>  #> data:  tab #> p-value = 8.26e-05 #> alternative hypothesis: two.sided #>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"mtcars %>%   tabyl(carb, cyl) %>%   adorn_totals() #>   carb  4 6  8 #>      1  5 2  0 #>      2  6 0  4 #>      3  0 0  3 #>      4  0 4  6 #>      6  0 1  0 #>      8  0 0  1 #>  Total 11 7 14"},{"path":"/reference/tabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"fully-featured alternative table(). Results data.frames can formatted enhanced janitor's family adorn_ functions. Specify data.frame one, two, three unquoted column names want tabulate.  Three variables generates list 2-way tabyls, split third variable. Alternatively, can tabulate single variable data.frame calling tabyl() vector, e.g., tabyl(mtcars$gear).","code":""},{"path":"/reference/tabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"","code":"tabyl(dat, ...)  # Default S3 method tabyl(dat, show_na = TRUE, show_missing_levels = TRUE, ...)  # S3 method for class 'data.frame' tabyl(dat, var1, var2, var3, show_na = TRUE, show_missing_levels = TRUE, ...)"},{"path":"/reference/tabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"dat data.frame containing variables wish count. , vector want tabulate. ... Additional arguments passed methods. show_na counts NA values displayed?  one-way tabyl, presence NA values triggers additional column showing valid percentages (calculated excluding NA values). show_missing_levels counts missing levels factors displayed? rows /columns zeroes.  Useful keeping consistent output dimensions even certain factor levels may present data. var1 column name first variable. var2 (optional) column name second variable (values become column names 2-way tabulation). var3 (optional) column name third variable (3-way tabulation split list values).","code":""},{"path":"/reference/tabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"data.frame frequencies percentages tabulated variable(s). 3-way tabulation returns list data frames.","code":""},{"path":"/reference/tabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"","code":"tabyl(mtcars, cyl) #>  cyl  n percent #>    4 11 0.34375 #>    6  7 0.21875 #>    8 14 0.43750 tabyl(mtcars, cyl, gear) #>  cyl  3 4 5 #>    4  1 8 2 #>    6  2 4 1 #>    8 12 0 2 tabyl(mtcars, cyl, gear, am) #> $`0` #>  cyl  3 4 5 #>    4  1 2 0 #>    6  2 2 0 #>    8 12 0 0 #>  #> $`1` #>  cyl 3 4 5 #>    4 0 6 2 #>    6 0 2 1 #>    8 0 0 2 #>   # or using the %>% pipe mtcars %>%   tabyl(cyl, gear) #>  cyl  3 4 5 #>    4  1 8 2 #>    6  2 4 1 #>    8 12 0 2  # illustrating show_na functionality: my_cars <- rbind(mtcars, rep(NA, 11)) my_cars %>% tabyl(cyl) #>  cyl  n    percent valid_percent #>    4 11 0.33333333       0.34375 #>    6  7 0.21212121       0.21875 #>    8 14 0.42424242       0.43750 #>   NA  1 0.03030303            NA my_cars %>% tabyl(cyl, show_na = FALSE) #>  cyl  n percent #>    4 11 0.34375 #>    6  7 0.21875 #>    8 14 0.43750  # Calling on a single vector not in a data.frame: val <- c(\"hi\", \"med\", \"med\", \"lo\") tabyl(val) #>  val n percent #>   hi 1    0.25 #>   lo 1    0.25 #>  med 2    0.50"},{"path":"/reference/top_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"Get frequency table factor variable, grouped categories level.","code":""},{"path":"/reference/top_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"","code":"top_levels(input_vec, n = 2, show_na = FALSE)"},{"path":"/reference/top_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"input_vec factor variable tabulate. n Number levels include top bottom groups show_na cases variable NA shown?","code":""},{"path":"/reference/top_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"data.frame (actually tbl_df) frequencies grouped, tabulated variable.  Includes counts percentages, valid percentages (calculated omitting NA values, present vector show_na = TRUE.)","code":""},{"path":"/reference/top_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"","code":"top_levels(as.factor(mtcars$hp), 2) #>                  as.factor(mtcars$hp)  n percent #>                                52, 62  2  0.0625 #>  <<< Middle Group (18 categories) >>> 28  0.8750 #>                              264, 335  2  0.0625"},{"path":"/reference/untabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove tabyl attributes from a data.frame. — untabyl","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"Strips away tabyl-related attributes data.frame.","code":""},{"path":"/reference/untabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"","code":"untabyl(dat)"},{"path":"/reference/untabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"dat data.frame class tabyl.","code":""},{"path":"/reference/untabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"data.frame, without tabyl class attributes.","code":""},{"path":"/reference/untabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"","code":"mtcars %>%   tabyl(am) %>%   untabyl() %>%   attributes() # tabyl-specific attributes are gone #> $names #> [1] \"am\"      \"n\"       \"percent\" #>  #> $class #> [1] \"data.frame\" #>  #> $row.names #> [1] 1 2 #>"}]
